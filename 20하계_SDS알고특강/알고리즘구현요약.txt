<위상 정렬>
간선들의 정보를 받을 때 이어진 갯수(Indegree) 체크하기.
큐를 통해 BFS 돌리면서 노드가 뽑힐 때 마다 연결된 Indegree를 줄여주고 0이 된다면
큐에 넣어서 BFS 돌려주기 

<펜윅 트리> - 업데이트가 있고 구간 합 일때 사용. 세그보다 간단하며 빠르다
트리의 사이즈는 노드의 개수만큼(N)
LSB는 (v&-v)로 구한다. 업데이트 시엔 아래서 올라가므로 v += (v&-v) / 트리 사이즈까지
sum은 위에서부터 내려가므로 v -= (v&-v) / 루트노드까지
a, b 구간의 합은 sum(b) - sum(a-1) // a부터~ 니까 a-1 까지는 빼주어야 한다
만들 때 말고 업데이트 쿼리 시에는 기존의 arr의 값도 수정해주어야 한다 

<세그먼트 트리>
트리의 사이즈는 약 4*N, 정확히는 2^(h+1)개. ( h = (int)ceil(log2(N) )
MakeTree => left, right 같을 때(리프노드일 때) 노드에 Array[left]값 저장
return tree[node] = MakeTree(node*2, left, mid) + Make(node*2+1, mid+1, right)를 통해 채우기

update => index < left || right < index return 범위 벗어난 곳들
그게 아니면 tree[node] += d 하고 재귀를 통해 left~mid, mid+1 ~ right부분도 내려가면서 업데이트

query => qRight < left || right < qleft 리턴 // 쿼리의 범위가 벗어나면
쿼리의 범위가 올바르면 return tree[node]
애매하게 한쪽만 걸친다면 재귀를 통해 쿼리 내려가기

<유니온 파인드>
초기에 부모배열을 모두 자기자신으로 초기화
Find = if(a == parent[a] return a  else return parent[a] = Find(parent[a]) 로 경로압축

<크루스칼을 이용한 MST>
간선의 비용을 오름차순으로 정렬
하나씩 뽑으로 유니온 파인드를 이용해 사이클 검사 + 부모노드합치기

<LCA> - 연습필요
DFS로 depth와 parent[here][0] = here. 현재 연결된 노드의 부모는 현재 노드라고 표시

MakeDP로 parent 테이블 완성하기. 이 때 바깥 for문을 for(1~20)으로 돌려서 바로 위 부모부터 찾아가며 채우는 방식. parent[i][j] = parent[parent[i][j-1]][j-1]의 의미를 기억하자.

LCA => depth비교를 통해 항상 a의 깊이가 작게 = b가 트리상 더 아래에 있도록 swap
for(20~1)을 통해 큰 값으로부터 if(depth[a] <= depth[parent[b][i]]) b = depth[parent[b][i]] 를 통해 a,b의 뎁스 맞추기

if(a == b) return a // 현재가 공통조상이면 리턴
for문 큰 값부터 parent[a][i] != parent[b][i] 를 통해 조건에 해당하면 a, b각각 parent로 올리면서 찾기. 마지막에 return parent[a][0]을 통해 조상 리턴

<다익스트라>
민힙이 필요하므로 PQ필요. 힙의 정렬 기준은 간선의 비용
시작노드부터 연결된 간선들을 dist배열에 넣어간다. 이미 dist가 차있는 경우엔 continue
(why ? min heap이므로 먼저 채워진 값이 늦게 나온 값보다 무조건 이하이기 때문) 

<벨만-포드>
시작점 0, 나머지 dist = INF
간선정보 벡터로 저장-> dist[e] = min(dist[e], dist[s]+val) 을 N-1번 반복.
이때 dist[s] == INF면 continue
끝난 뒤 한번 더 경로를 갱신해서 값이 갱신이 된다면 음수싸이클 존재

<트라이>
여기에 요약할 수 없다...

<Inversion counting>
머지소트를 구현하면서 자신의 앞에 몇개가 먼저 정렬됐는지 체크하면 된다.
인터넷에 있는 방법과 배운 구현이 아주 약간 다르므로 배웠던 걸로 이해하자
내 왼쪽으로 몇개가 있는가 => left를 넣을 때 right_idx - mid+1
오른쪽으로 몇개가 있는가 => right를 넣을때 left_idx - start